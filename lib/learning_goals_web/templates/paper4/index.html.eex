<h1>Example Manifesto:</h1>
<h2>How to Write Perfect Code</h2>

<p><span style="font-weight: 400;">Keep an </span><strong>ideal</strong> <span style="font-weight: 400;">code file somewhere on your computer.</span></p>
<p><span style="font-weight: 400;">At some point in your professional or academic career you will write a program or maybe just a portion of a program that is perfect. This one file may be only four hundred lines of code, maybe it will be four thousand. However this will serve as a beacon to your depressed mind when you have been writing spaghetti code for the last four years and your trying to figure out what the comment &ldquo;//to compute instances of diversions on a semi basic scale @randomFunction&rdquo; meant to you four months ago. You can take a deep breath and go look at this perfect code, feel the tear trickle down your face as you think of simpler times, and dream of them again.</span></p>
<p>&nbsp;</p>
<p><span style="font-weight: 400;">Code </span><strong>comfortably</strong><span style="font-weight: 400;">.</span></p>
<p><span style="font-weight: 400;">Everyone has always coded in their skinny jeans with a belt buckle cutting into your stomach, your shirt is a little too tight around your neck and upper arms, and of course is slightly too short so it is riding up your back and exposing your last pair of underwear. No one writes good code when they are uncomfortable. Go home. Put on your sweats, or get naked, no judgement. In fact nude coding is probably the most productive state you will ever find yourself in. In short, perfect coding requires nudity.</span></p>
<p>&nbsp;</p>
<p><span style="font-weight: 400;">Choose a </span><strong>dark</strong> <span style="font-weight: 400;">color scheme for your text editor or IDE of choice.</span></p>
<p><span style="font-weight: 400;">Light color schemes are for chumps. Not only do they look like a 1970&rsquo;s sci fi spaceship computer screen interface, light color schemes are also impractical. They make your eyes hurt if you look at them for too long, and they make code just look worse in general. The emphasis should be on your code, not on the background to your code. Choose a nice coffee colored color scheme where nothing is too in your face but everything feels warm and friendly to your eyes. Also with this nice coffee colored scheme you will feel like you have a warm cup of coffee with you at all times, and better work is always done with a warm cup of coffee.</span></p>
<p>&nbsp;</p>
<p><span style="font-weight: 400;">Choose any text editor you want, as long as its </span><strong>Atom</strong><span style="font-weight: 400;">.</span></p>
<p><span style="font-weight: 400;">Similarly to how you can have the Model T in any color as long as it&rsquo;s black, Atom is the only text editor you should use. Atom keeps everything organized and is completely integrated with git, it also has the aforementioned coffee color scheme. Atom also allows you to write better code with its auto indent plugins and plethora of community made plugins. Atom is the most organized editor out there, and of course the key to writing perfect code is organization. Atom also does not do most of the annoying automations of most other text editors, like trying to integrate an IDE for every language.</span></p>
<p>&nbsp;</p>
<p><span style="font-weight: 400;">Never code in </span><strong>Java</strong><span style="font-weight: 400;">.</span></p>
<p><span style="font-weight: 400;">This one is self explanatory.</span></p>
<p>&nbsp;</p>
<p><span style="font-weight: 400;">Only code in languages that you</span> <strong>know</strong><span style="font-weight: 400;">.</span></p>
<p><span style="font-weight: 400;">This may be obvious, but too many people try to write serious code in an language that they have never used before. It ends up being a mess of pseudocode converted to whatever language you decided this new project should be in. Then once you actually know the language you go back and cry at how bad your code was, and that is of course a sad existence. This rule does not apply to you if you only know Java. If you only know Java, go learn a new language, now.</span></p>
<p><span style="font-weight: 400;">Copy-paste is your </span><strong>friend</strong><span style="font-weight: 400;">.</span></p>
<p><span style="font-weight: 400;">Often programmers find themselves in situations where they are unsure of how to write certain algorithms, or even what the most efficient way to write an algorithm is. StackExchange and other sites already have the code for all these algorithms. Go there ctrl+c then ctrl+v and no one is the wiser. Everyone thinks you are a genius and your code works perfectly! Remember no one is ever wrong on the internet.</span></p>
<p><br /><br /></p>
<p><span style="font-weight: 400;">Take a </span><strong>break</strong><span style="font-weight: 400;">.</span></p>
<p><span style="font-weight: 400;">Believe it or not, staring at a screen for eight hours a day is not good for your eyes. Breaks are a good outlet for releasing stress and easing the strain on your body and mind. Few tasks are more frustrating than working on the same bug in a program for four hours straight. Step outside. Release a primal roar into wilderness. Scare some pigeons. Reflect on an awkward conversation you had in 5</span><span style="font-weight: 400;">th</span><span style="font-weight: 400;"> grade and wishing you had said something else. Whatever it is that you need to do. Just when you are done be ready to go back and sit there well into the wee hours of the morning working on that same bug. Oh, and also, check for memory leaks.</span></p>
<p>&nbsp;</p>
<p><span style="font-weight: 400;">Make your documentation </span><strong>interesting</strong><span style="font-weight: 400;">.</span></p>
<p><span style="font-weight: 400;">Nothing is worse than reading boring documentation. Sure you may want your documentation to make sense to future you, and other programmers. However reading documentation is so much more fun when there is a cute coding haiku or limerick every hundred lines or so. Too often people die of boredom while trying to read documentation which is hopeless anyway because no one&rsquo;s documentation ever makes sense. Here&rsquo;s an example documentation, how to be creative;</span></p>
<p><span style="font-weight: 400;">There once was a man with a plan</span></p>
<p><span style="font-weight: 400;">Who needed to code in fortran</span></p>
<p><span style="font-weight: 400;">He used this object</span></p>
<p><span style="font-weight: 400;">For some Boolean logic</span></p>
<p><span style="font-weight: 400;">To check if the user was from Japan</span></p>
<p>&nbsp;</p>
<p><span style="font-weight: 400;">Never let </span><strong>anyone</strong><span style="font-weight: 400;"> else touch your code.</span></p>
<p><span style="font-weight: 400;">Other people just serve to complicate code. They all have their own ideas and theories about how code should be written and documented. Everyone else is an idiot. Since the only person who is ever going to be able to read your code anyway, screw everyone else. If at some point someone does convince you to change your code, just do it in front of them so they feel the gratification of having helped, then change it back. No one&rsquo;s ideas about code are so much better than yours that can justify you not being able to remember why you made the coding decisions that you made.</span></p>
